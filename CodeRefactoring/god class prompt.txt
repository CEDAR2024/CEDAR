In computer programming, a code smell is any characteristic in the source code of a program that possibly indicates a deeper problem. I will now tell you the definition about {{codesmell}}. Please read the definition and refactor the code according to the target to eliminate this smell.
The definition of {{codesmell}} is: {{definition}}
Here is an example for refactoring code which has {{codesmell}} smell, Please read it carefully and learn to show only the most modified critical code after refactoring. You can replace functional code with comments.
You do not need to keep the structure, improve the code's readability and maintainability
<example>

</example>

Now based on the example, refactor the following code. You don't need to give the full code, just give the most modified part of it. You should not output extra content. Ignore the logic belonging, just divide those methods in original code into as many classes as possible
```java
{{input}}
```

here is a list of method in original code, note which class each method is belonging to in the refactored code:


codesmell:
Long Method / God Class / Feature Envy / Refused Bequest

definition:
Long Method is a method contains too many lines of codes, making it difficult to understand and maintain. Typically, a line of code ends with ';'. Declarations of method and class, "for-loop", "while-loop", "if-statement", "else-statement", "switch-statement", "case-statement", "try-statement", "catch-statement" must also be treated as a separate line.
God Class is a large and unwieldy class that takes on too many responsibilities within an application. It concentrates a multitude of functions, oversees numerous objects, and effectively tries to do everything. 
Feature Envy occurs when a method in one class can't seem to keep its eyes off the data of another class. This sneaky behavior hints that there might be a better home for the method, where it fits in more naturally and keeps the codebase cleaner and easier to manage.
Refused Bequest occurs if a subclass uses only some of the methods and properties inherited from its parents. This is an indication that the class should not be a subclass of that parent class, since child classes should be adding or modifying functionality.

long method example:
<example>
origin code:
```java
private static boolean match(String pattern, String str) {
        char[] patArr = pattern.toCharArray();
        char[] strArr = str.toCharArray();
        int patIdxStart = 0;
        int patIdxEnd   = patArr.length-1;
        int strIdxStart = 0;
        int strIdxEnd   = strArr.length-1;
        char ch;

        boolean containsStar = false;
        for (int i = 0; i < patArr.length; i++) {
            if (patArr[i] == '*') {
                containsStar = true;
                break;
            }
        }

        if (!containsStar) {
            // No '*'s, so we make a shortcut
            if (patIdxEnd != strIdxEnd) {
                return false; // Pattern and string do not have the same size
            }
            for (int i = 0; i <= patIdxEnd; i++) {
                ch = patArr[i];
                if (ch != '?' && ch != strArr[i]) {
                    return false; // Character mismatch
                }
            }
            return true; // String matches against pattern
        }

        if (patIdxEnd == 0) {
            return true; // Pattern contains only '*', which matches anything
        }

        // Process characters before first star
        while((ch = patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {
            if (ch != '?' && ch != strArr[strIdxStart]) {
                return false;
            }
            patIdxStart++;
            strIdxStart++;
        }
        if (strIdxStart > strIdxEnd) {
            // All characters in the string are used. Check if only '*'s are
            // left in the pattern. If so, we succeeded. Otherwise failure.
            for (int i = patIdxStart; i <= patIdxEnd; i++) {
                if (patArr[i] != '*') {
                    return false;
                }
            }
            return true;
        }

        // Process characters after last star
        while((ch = patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {
            if (ch != '?' && ch != strArr[strIdxEnd]) {
                return false;
            }
            patIdxEnd--;
            strIdxEnd--;
        }
        if (strIdxStart > strIdxEnd) {
            // All characters in the string are used. Check if only '*'s are
            // left in the pattern. If so, we succeeded. Otherwise failure.
            for (int i = patIdxStart; i <= patIdxEnd; i++) {
                if (patArr[i] != '*') {
                    return false;
                }
            }
            return true;
        }

        // process pattern between stars. padIdxStart and patIdxEnd point
        // always to a '*'.
        while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {
            int patIdxTmp = -1;
            for (int i = patIdxStart+1; i <= patIdxEnd; i++) {
                if (patArr[i] == '*') {
                    patIdxTmp = i;
                    break;
                }
            }
            if (patIdxTmp == patIdxStart+1) {
                // Two stars next to each other, skip the first one.
                patIdxStart++;
                continue;
            }
            // Find the pattern between padIdxStart & padIdxTmp in str between
            // strIdxStart & strIdxEnd
            int patLength = (patIdxTmp-patIdxStart-1);
            int strLength = (strIdxEnd-strIdxStart+1);
            int foundIdx  = -1;
strLoop:
            for (int i = 0; i <= strLength - patLength; i++) {
                for (int j = 0; j < patLength; j++) {
                    ch = patArr[patIdxStart+j+1];
                    if (ch != '?' && ch != strArr[strIdxStart+i+j]) {
                        continue strLoop;
                    }
                }

                foundIdx = strIdxStart+i;
                break;
            }

            if (foundIdx == -1) {
                return false;
            }

            patIdxStart = patIdxTmp;
            strIdxStart = foundIdx+patLength;
        }

        // All characters in the string are used. Check if only '*'s are left
        // in the pattern. If so, we succeeded. Otherwise failure.
        for (int i = patIdxStart; i <= patIdxEnd; i++) {
            if (patArr[i] != '*') {
                return false;
            }
        }
        return true;
    }
```
refactored code:
```java
private static boolean match(String pattern, String str) {
    char[] patArr = pattern.toCharArray();
    char[] strArr = str.toCharArray();

    if (!containsStar(patArr)) {
        return matchWithoutStar(patArr, strArr);
    }

    return matchWithStar(patArr, strArr);
}

private static boolean containsStar(char[] patArr) {
    for (char c : patArr) {
        if (c == '*') {
            return true;
        }
    }
    return false;
}

private static boolean matchWithoutStar(char[] patArr, char[] strArr) {
    if (patArr.length != strArr.length) {
        return false;
    }

    for (int i = 0; i < patArr.length; i++) {
        if (patArr[i] != '?' && patArr[i] != strArr[i]) {
            return false;
        }
    }
    return true;
}

private static boolean matchWithStar(char[] patArr, char[] strArr) {
    // Code that processes characters before first star,
    // characters after last star, and pattern between stars.
    // This part of the code has been left out because it's complex and would need more context to refactor correctly.
}
```
</example>


god class example:
<example>
refactored code:
```java
// New class to handle scanning of start tags
class StartTagScanner {
    private XMLEntityHandler.EntityReader entityReader;
    private XMLErrorReporter errorReporter;
    private StringPool stringPool;
    private EventHandler eventHandler;

    public StartTagScanner(XMLEntityHandler.EntityReader entityReader, XMLErrorReporter errorReporter, StringPool stringPool, EventHandler eventHandler) {
        this.entityReader = entityReader;
        this.errorReporter = errorReporter;
        this.stringPool = stringPool;
        this.eventHandler = eventHandler;
    }

    public void scanStartTag(QName element) throws Exception {
        // Implementation of scanning a start tag, calling eventHandler methods
    }
}

// New class to handle scanning of end tags
class EndTagScanner {
    private XMLEntityHandler.EntityReader entityReader;
    private XMLErrorReporter errorReporter;
    private StringPool stringPool;
    private EventHandler eventHandler;

    public EndTagScanner(XMLEntityHandler.EntityReader entityReader, XMLErrorReporter errorReporter, StringPool stringPool, EventHandler eventHandler) {
        this.entityReader = entityReader;
        this.errorReporter = errorReporter;
        this.stringPool = stringPool;
        this.eventHandler = eventHandler;
    }

    public void scanEndTag(QName element) throws Exception {
        // Implementation of scanning an end tag, calling eventHandler methods
    }
}

// New class to handle scanning of attributes
class AttributeScanner {
    private XMLEntityHandler.EntityReader entityReader;
    private XMLErrorReporter errorReporter;
    private StringPool stringPool;
    private EventHandler eventHandler;

    public AttributeScanner(XMLEntityHandler.EntityReader entityReader, XMLErrorReporter errorReporter, StringPool stringPool, EventHandler eventHandler) {
        this.entityReader = entityReader;
        this.errorReporter = errorReporter;
        this.stringPool = stringPool;
        this.eventHandler = eventHandler;
    }

    public boolean scanAttributes(QName element, QName attribute) throws Exception {
        // Implementation of scanning attributes, calling eventHandler methods
        // Returns true if attributes are successfully scanned, false otherwise
    }
}

// The XMLDocumentScanner class now delegates responsibility to the new classes
public final class XMLDocumentScanner {
    // ... (Other existing code and member variables remain unchanged)

    // Use the new classes within the XMLDocumentScanner methods
    private StartTagScanner startTagScanner;
    private EndTagScanner endTagScanner;
    private AttributeScanner attributeScanner;

    public XMLDocumentScanner(StringPool stringPool, XMLErrorReporter errorReporter, XMLEntityHandler entityHandler, XMLEntityHandler.CharBuffer literalData) {
        // ... (Other existing constructor code remains unchanged)
        this.startTagScanner = new StartTagScanner(entityReader, errorReporter, stringPool, fEventHandler);
        this.endTagScanner = new EndTagScanner(entityReader, errorReporter, stringPool, fEventHandler);
        this.attributeScanner = new AttributeScanner(entityReader, errorReporter, stringPool, fEventHandler);
    }

    // Example method usage after refactoring
    boolean scanElement(QName element) throws Exception {
        // Scan for attributes
        boolean hasAttributes = attributeScanner.scanAttributes(element, fAttributeQName);
        if (!hasAttributes) {
            // Handle error
        }

        // Scan for start tag
        startTagScanner.scanStartTag(element);

        // Scan for end tag
        endTagScanner.scanEndTag(element);

        // ... (Rest of the method implementation remains unchanged)
    }

    // ... (Other methods remain unchanged, but may also delegate to the new classes)
}
```
</example>


feature envy example:
<example>
original code:
void processRegionsInTransition(final RegionTransitionData data,
      final HRegionInfo regionInfo,
      final Map<ServerName, List<Pair<HRegionInfo, Result>>> deadServers,
      int expectedVersion)
  throws KeeperException {
    String encodedRegionName = regionInfo.getEncodedName();
    LOG.info("Processing region " + regionInfo.getRegionNameAsString() +
      " in state " + data.getEventType());
    List<HRegionInfo> hris = this.enablingTables.get(regionInfo.getTableNameAsString());
    if (hris != null && !hris.isEmpty()) {
      hris.remove(regionInfo);
    }
    synchronized (regionsInTransition) {
      RegionState regionState = regionsInTransition.get(encodedRegionName);
      if (regionState != null ||
          failoverProcessedRegions.containsKey(encodedRegionName)) {
        // Just return
        return;
      }
      switch (data.getEventType()) {
      case M_ZK_REGION_CLOSING:
        // If zk node of the region was updated by a live server skip this
        // region and just add it into RIT.
        if (isOnDeadServer(regionInfo, deadServers) &&
            (data.getOrigin() == null || !serverManager.isServerOnline(data.getOrigin()))) {
          // If was on dead server, its closed now. Force to OFFLINE and this
          // will get it reassigned if appropriate
          forceOffline(regionInfo, data);
        } else {
          // Just insert region into RIT.
          // If this never updates the timeout will trigger new assignment
          regionsInTransition.put(encodedRegionName, new RegionState(
            regionInfo, RegionState.State.CLOSING,
            data.getStamp(), data.getOrigin()));
        }
        failoverProcessedRegions.put(encodedRegionName, regionInfo);
        break;

      case RS_ZK_REGION_CLOSED:
      case RS_ZK_REGION_FAILED_OPEN:
        // Region is closed, insert into RIT and handle it
        addToRITandCallClose(regionInfo, RegionState.State.CLOSED, data);
        failoverProcessedRegions.put(encodedRegionName, regionInfo);
        break;

      case M_ZK_REGION_OFFLINE:
        // If zk node of the region was updated by a live server skip this
        // region and just add it into RIT.
        if (isOnDeadServer(regionInfo, deadServers) &&
            (data.getOrigin() == null ||
              !serverManager.isServerOnline(data.getOrigin()))) {
          // Region is offline, insert into RIT and handle it like a closed
          addToRITandCallClose(regionInfo, RegionState.State.OFFLINE, data);
        } else if (data.getOrigin() != null &&
            !serverManager.isServerOnline(data.getOrigin())) {
          // to handle cases where offline node is created but sendRegionOpen
          // RPC is not yet sent
          addToRITandCallClose(regionInfo, RegionState.State.OFFLINE, data);
        } else {
          regionsInTransition.put(encodedRegionName, new RegionState(
              regionInfo, RegionState.State.PENDING_OPEN, data.getStamp(), data
                  .getOrigin()));
        }
        failoverProcessedRegions.put(encodedRegionName, regionInfo);
        break;

      case RS_ZK_REGION_OPENING:
        // TODO: Could check if it was on deadServers.  If it was, then we could
        // do what happens in TimeoutMonitor when it sees this condition.

        // Just insert region into RIT
        // If this never updates the timeout will trigger new assignment
        if (regionInfo.isMetaTable()) {
          regionsInTransition.put(encodedRegionName, new RegionState(
              regionInfo, RegionState.State.OPENING, data.getStamp(), data
                  .getOrigin()));
          // If ROOT or .META. table is waiting for timeout monitor to assign
          // it may take lot of time when the assignment.timeout.period is
          // the default value which may be very long.  We will not be able
          // to serve any request during this time.
          // So we will assign the ROOT and .META. region immediately.
          processOpeningState(regionInfo);
          break;
        }
        regionsInTransition.put(encodedRegionName, new RegionState(regionInfo,
            RegionState.State.OPENING, data.getStamp(), data.getOrigin()));
        failoverProcessedRegions.put(encodedRegionName, regionInfo);
        break;

      case RS_ZK_REGION_OPENED:
        // Region is opened, insert into RIT and handle it
        regionsInTransition.put(encodedRegionName, new RegionState(
            regionInfo, RegionState.State.OPEN,
            data.getStamp(), data.getOrigin()));
        ServerName sn = data.getOrigin() == null? null: data.getOrigin();
        // sn could be null if this server is no longer online.  If
        // that is the case, just let this RIT timeout; it'll be assigned
        // to new server then.
        if (sn == null) {
          LOG.warn("Region in transition " + regionInfo.getEncodedName() +
            " references a null server; letting RIT timeout so will be " +
            "assigned elsewhere");
        } else if (!serverManager.isServerOnline(sn)
            && (isOnDeadServer(regionInfo, deadServers)
                || regionInfo.isMetaRegion() || regionInfo.isRootRegion())) {
          forceOffline(regionInfo, data);
        } else {
          new OpenedRegionHandler(master, this, regionInfo, sn, expectedVersion)
              .process();
        }
        failoverProcessedRegions.put(encodedRegionName, regionInfo);
        break;
      }
    }
  }
refactored code: 

```java
public class RegionStateManager {
    private Map<String, RegionState> regionsInTransition;
    private Map<ServerName, List<Pair<HRegionInfo, Result>>> deadServers;
    private ServerManager serverManager;

    public RegionStateManager(Map<String, RegionState> regionsInTransition, 
                              Map<ServerName, List<Pair<HRegionInfo, Result>>> deadServers,
                              ServerManager serverManager) {
        this.regionsInTransition = regionsInTransition;
        this.deadServers = deadServers;
        this.serverManager = serverManager;
    }
    
    public void processRegionState(HRegionInfo regionInfo, RegionTransitionData data, int expectedVersion) {
        String encodedRegionName = regionInfo.getEncodedName();
        RegionState regionState = regionsInTransition.get(encodedRegionName);

        if (regionState != null || failoverProcessedRegions.containsKey(encodedRegionName)) {
            return;
        }

        switch (data.getEventType()) {
            case M_ZK_REGION_CLOSING:
                handleRegionClosing(regionInfo, data);
                break;
            case RS_ZK_REGION_CLOSED:
            case RS_ZK_REGION_FAILED_OPEN:
                handleRegionClosed(regionInfo, data);
                break;
            case M_ZK_REGION_OFFLINE:
                handleRegionOffline(regionInfo, data);
                break;
            case RS_ZK_REGION_OPENING:
                handleRegionOpening(regionInfo, data);
                break;
            case RS_ZK_REGION_OPENED:
                handleRegionOpened(regionInfo, data, expectedVersion);
                break;
        }
    }

    private void handleRegionClosing(HRegionInfo regionInfo, RegionTransitionData data) {
        if (isOnDeadServer(regionInfo) && (data.getOrigin() == null || !serverManager.isServerOnline(data.getOrigin()))) {
            forceOffline(regionInfo, data);
        } else {
            regionsInTransition.put(regionInfo.getEncodedName(), new RegionState(
                regionInfo, RegionState.State.CLOSING, data.getStamp(), data.getOrigin()));
        }
        failoverProcessedRegions.put(regionInfo.getEncodedName(), regionInfo);
    }

    // Additional methods to handle other cases (handleRegionClosed, handleRegionOffline, etc.)
    
    private boolean isOnDeadServer(HRegionInfo regionInfo) {
        // Check if region is on a dead server
    }

    private void forceOffline(HRegionInfo regionInfo, RegionTransitionData data) {
        // Force region offline
    }
}
```

### Usage in the main class:

```java
public void processRegionsInTransition(final RegionTransitionData data,
      final HRegionInfo regionInfo,
      final Map<ServerName, List<Pair<HRegionInfo, Result>>> deadServers,
      int expectedVersion) throws KeeperException {
    LOG.info("Processing region " + regionInfo.getRegionNameAsString() +
      " in state " + data.getEventType());
    List<HRegionInfo> hris = this.enablingTables.get(regionInfo.getTableNameAsString());
    if (hris != null && !hris.isEmpty()) {
      hris.remove(regionInfo);
    }
    RegionStateManager manager = new RegionStateManager(regionsInTransition, deadServers, serverManager);
    manager.processRegionState(regionInfo, data, expectedVersion);
}
```
</example>


refused bequest:
<example>
original code:
```java
public final class Configuration {

    ////////////////////////////////////////////////////////////////
    // Instance variables

    /**
     * Property to indicate configuration load from file.
     */
    public static final String FILE_LOADED = "configuration.load.file";

    /**
     * Property to indicate configuration load from url.
     */
    public static final String URL_LOADED = "configuration.load.url";

    /**
     * Property to indicate configuration save to file.
     */
    public static final String FILE_SAVED = "configuration.save.file";

    /**
     * Property to indicate configuration save to url.
     */
    public static final String URL_SAVED = "configuration.save.url";

    /**
     * The only occurance of the configuration handler.
     */
    private static ConfigurationHandler config =
	getFactory().getConfigurationHandler();

    /**
     * Private constructor so it cannot be instantiated.
     */
    private Configuration() {
    }

    /**
     * Returns the instance of the configuration singleton.
     *
     * @return the configuration handler
     */
    public static ConfigurationHandler getConfigurationHandler() {
	return config;
    }

    /**
     * Returns the configuration factory instance.<p>
     *
     * This is equivalent to ConfigurationFactory.getInstance() but
     * using Configuration.getFactory() is shorter to type and
     * allows us not to have to deal with ConfigurationFactory at
     * all if we don't need to modify or configure it.
     *
     * @return the configuration factory
     */
    public static ConfigurationFactory getFactory() {
	return ConfigurationFactory.getInstance();
    }

    /**
     * Load the configuration from the default location.
     *
     * The configuration will be automatically loaded from the default
     * location the first time a value is queried or modified, if it
     * had not been previously loaded.  Only the first load request
     * will be honored, so if the configuration is to be loaded from
     * a non-default location, load(name) must be used prior to any
     * other call.  The configuration can be loaded only one time.
     *
     * Implementations must ignore load requests once a load is
     * already successful, and must return false for each of those
     * ignored requests.
     *
     * @return true if the load is successful, otherwise false
     */
    public static boolean load() {
	return config.loadDefault();
    }

    /**
     * Load the configuration from a specified file.
     *
     * @param file the File to load
     *
     * @return true if the load is successful, otherwise false
     */
    public static boolean load(File file) {
	return config.load(file);
    }

    /**
     * Load the configuration from a specified url.
     *
     * @param url the URL to load
     *
     * @return true if the load is successful, otherwise false
     */
    public static boolean load(URL url) {
	return config.load(url);
    }

    /**
     * Save the configuration to the default location.
     *
     * Implementations do not have to handle this method.
     * If the method is not allowed or it fails, the implementation
     * must return false.
     *
     * @return true if the save is successful, otherwise false
     */
    public static boolean save() {
	return Configuration.save(false);
    }

    /**
     * Save the configuration to the default location.
     *
     * Implementations do not have to handle this method.
     * If the method is not allowed or it fails, the implementation
     * must return false.
     *
     * @param force the file to save even if it would not normally
     * be saved.
     *
     * @return true if the save is successful, otherwise false
     */
    public static boolean save(boolean force) {
	return config.saveDefault(force);
    }

    /**
     * Returns the string value of a configuration property.
     *
     * @param key the key to retrieve the value of
     *
     * @return the string value of the parameter if it exists, otherwise
     * a zero length string
     */
    public static String getString(ConfigurationKey key) {
	return getString(key, "");
    }

    /**
     * Returns the string value of a configuration property.
     *
     * @param key the key to retrieve the value of
     * @param defaultValue the value to return if the key does not exist
     *
     * @return the string value of the parameter if it exists, otherwise the
     *   default value
     */
    public static String getString(ConfigurationKey key,
                                   String defaultValue) {
	return config.getString(key, defaultValue);
    }

    /**
     * Returns the numeric value of a configuration property.
     *
     * @param key the key to retrieve the value of
     *
     * @return the string value of the parameter if it exists, otherwise zero
     */
    public static int getInteger(ConfigurationKey key) {
	return getInteger(key, 0);
    }

    /**
     * Returns the numeric value of a configuration property.
     *
     * @param key the key to retrieve the value of
     * @param defaultValue if the key is not found
     *
     * @return the string value of the parameter if it exists,
     *         otherwise the default value
     */
    public static double getDouble(ConfigurationKey key,
                                   double defaultValue) {
	return config.getDouble(key, defaultValue);
    }

    /**
     * Returns the numeric value of a configuration property.
     *
     * @param key the key to retrieve the value of
     *
     * @return the string value of the parameter if it exists, otherwise zero
     */
    public static double getDouble(ConfigurationKey key) {
	return getDouble(key, 0);
    }

    /**
     * Returns the numeric value of a configuration property.
     *
     * @param key the key to retrieve the value of
     * @param defaultValue the value to return if the key does not exist
     *
     * @return the numeric value of the parameter if it exists, otherwise
     *  the default value
     */
    public static int getInteger(ConfigurationKey key, int defaultValue) {
	return config.getInteger(key, defaultValue);
    }

    /**
     * Returns the boolean value of a configuration property.
     *
     * @param key the key to retrieve the value of
     *
     * @return the boolean value of the parameter if it exists, otherwise false
     */
    public static boolean getBoolean(ConfigurationKey key) {
	return getBoolean(key, false);
    }

    /**
     * Returns the boolean value of a configuration property.
     *
     * @param key the key to retrieve the value of
     * @param defaultValue the value to return if the key does not exist
     *
     * @return the boolean value of the parameter if it exists, otherwise
     *  the default value
     */
    public static boolean getBoolean(ConfigurationKey key,
                                     boolean defaultValue) {
	return config.getBoolean(key, defaultValue);
    }

    /**
     * Sets the string value of a configuration property.
     *
     * @param key the key to set
     * @param newValue the value to set the key to.
     */
    public static void setString(ConfigurationKey key, String newValue) {
	config.setString(key, newValue);
    }

    /**
     * Sets the numeric value of a configuration property.
     *
     * @param key the key to set
     * @param newValue the value to set the key to.
     */
    public static void setInteger(ConfigurationKey key, int newValue) {
	config.setInteger(key, newValue);
    }

    /**
     * Sets the numeric value of a configuration property.
     *
     * @param key the key to set
     * @param newValue the value to set the key to.
     */
    public static void setDouble(ConfigurationKey key, double newValue) {
	config.setDouble(key, newValue);
    }

    /**
     * Sets the boolean value of a configuration property.
     *
     * @param key the key to set
     * @param newValue the value to set the key to.
     */
    public static void setBoolean(ConfigurationKey key,
                                  boolean newValue) {
	config.setBoolean(key, newValue);
    }

    /**
     * Adds a property change listener.
     *
     * @param pcl The property change listener to add
     */
    public static void addListener(PropertyChangeListener pcl) {
	config.addListener(pcl);
    }

    /**
     * Removes a property change listener.
     *
     * @param pcl The property change listener to remove
     */
    public static void removeListener(PropertyChangeListener pcl) {
	config.removeListener(pcl);
    }

    /**
     * Adds a property change listener.Static for simplicity of use.
     *
     * @param key The key to listen for changes of
     * @param pcl The property change listener to add
     */
    public static void addListener(ConfigurationKey key,
                                   PropertyChangeListener pcl) {
	config.addListener(key, pcl);
    }

    /**
     * Removes a property change listener.
     *
     * @param key The key to listen for changes of
     * @param pcl The property change listener to remove
     */
    public static void removeListener(ConfigurationKey key,
                                      PropertyChangeListener pcl) {
	config.removeListener(key, pcl);
    }

    /**
     * @param key The key to remove.
     */
    public static void removeKey(ConfigurationKey key) {
        config.remove(key.getKey());
    }

    /**
     * Create a single component configuration key.
     *
     * @param k1 key component 1.
     * @return the new {@link ConfigurationKey}.
     */
    public static ConfigurationKey makeKey(String k1) {
	return new ConfigurationKeyImpl(k1);
    }

    /**
     * Create a sub-component of an existing configuration key.
     *
     * @param ck existing key to extend.
     * @param k1 key component 1.
     * @return the new {@link ConfigurationKey}.
     */
    public static ConfigurationKey makeKey(ConfigurationKey ck, String k1) {
	return new ConfigurationKeyImpl(ck, k1);
    }

    /**
     * Create a two-component configuration key.
     *
     * @param k1 key component 1.
     * @param k2 key component 2.
     * @return the new {@link ConfigurationKey}.
     */
    public static ConfigurationKey makeKey(String k1, String k2) {
	return new ConfigurationKeyImpl(k1, k2);
    }

    /**
     * Create a three-component configuration key.
     *
     * @param k1 key component 1.
     * @param k2 key component 2.
     * @param k3 key component 3.
     * @return the new {@link ConfigurationKey}.
     */
    public static ConfigurationKey makeKey(String k1, String k2, String k3) {
	return new ConfigurationKeyImpl(k1, k2, k3);
    }

    /**
     * Create a four-component configuration key.
     *
     * @param k1 key component 1.
     * @param k2 key component 2.
     * @param k3 key component 3.
     * @param k4 key component 4.
     * @return the new {@link ConfigurationKey}.
     */
    public static ConfigurationKey makeKey(String k1, String k2,
					   String k3, String k4) {
	return new ConfigurationKeyImpl(k1, k2, k3, k4);
    }

    /**
     * Create a five-component configuration key.
     *
     * @param k1 key component 1.
     * @param k2 key component 2.
     * @param k3 key component 3.
     * @param k4 key component 4.
     * @param k5 key component 5.
     * @return the new {@link ConfigurationKey}.
     */
    public static ConfigurationKey makeKey(String k1, String k2,
					   String k3, String k4,
					   String k5) {
	return new ConfigurationKeyImpl(k1, k2, k3, k4, k5);
    }
}
```
refactored code:
```java
// Separate class for handling configuration
class ConfigurationHandler {
    private Properties properties;

    public ConfigurationHandler() {
        properties = new Properties();
    }

    public boolean loadDefault() {
        // Implement default loading logic
    }

    public boolean load(File file) {
        // Implement file loading logic
    }

    public boolean load(URL url) {
        // Implement URL loading logic
    }

    public boolean saveDefault(boolean force) {
        // Implement default saving logic
    }

    public String getString(ConfigurationKey key, String defaultValue) {
        // Implement string retrieval logic
    }

    // ... other methods for getting and setting properties
}

// Refactored Configuration class
public final class Configuration {
    private static ConfigurationHandler configHandler = new ConfigurationHandler();

    // ... keep the constants as they are

    // Private constructor to prevent instantiation
    private Configuration() {}

    // Static method to get the configuration handler
    public static ConfigurationHandler getConfigHandler() {
        return configHandler;
    }

    // ... other static methods can be removed or refactored to use configHandler
}

// Usage example in client code
public class Client {
    public void someMethod() {
        // Get the configuration handler
        ConfigurationHandler configHandler = Configuration.getConfigHandler();

        // Load configuration
        boolean loaded = configHandler.load(new File("config.properties"));

        // Get and set properties through the configuration handler
        String value = configHandler.getString(someKey, "default");
    }
}
```
</example>