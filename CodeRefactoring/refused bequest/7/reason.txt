In refactoring the `FigActor` class to address the Refused Bequest code smell, several changes were made. Hereâ€™s a detailed explanation of each change and how they help alleviate the code smell:

### 1. **Removed Inheritance**
**Original**: `FigActor extends FigNodeModelElement`
**Change**: Removed the inheritance from `FigNodeModelElement`.
**Reason**: If `FigActor` does not significantly leverage inherited functionality or modifies most of the inherited behavior to fit its context-specific needs, it could indicate that the subclass should not be inheriting from `FigNodeModelElement`. This setup could complicate the design and introduce dependencies that are not required.
**Benefit**: Removing inheritance makes `FigActor` a standalone class, which increases its modularity and reduces complexity. This avoids inheriting potentially unused or irrelevant methods and properties, thus addressing the Refused Bequest smell.

### 2. **Component Initialization within `FigActor`**
**Original**: Direct use of constructor to initialize graphical components.
**Change**: Centralized all component initialization into a private method called `initializeComponents`.
**Reason**: To enhance encapsulation and cohesion within the class. By managing its graphical components internally, `FigActor` ensures that all aspects of its initialization are contained within a single, manageable method.
**Benefit**: This approach makes the class easier to read and maintain. It consolidates component setup in one location, making future modifications simpler and more localized.

### 3. **Method Realignment**
**Original**: Direct manipulation of graphical properties spread across the class.
**Change**: Reorganized methods like `setLineWidth` and `setFilled` to directly manage these properties on the `FigActor`'s own components, rather than relying on inherited behavior.
**Reason**: To ensure that the class only contains methods that directly manipulate its internal state without relying on the superclass's implementation, which might not be entirely suitable or necessary for `FigActor`'s specific requirements.
**Benefit**: Increases the self-sufficiency of the `FigActor` class and ensures that each method is fully optimized for its specific use case. This realignment directly addresses the Refused Bequest by eliminating the need to inherit methods that are not entirely suitable, thereby improving the overall design and effectiveness of the class.

### 4. **Independent Management of Graphical Properties**
**Change**: Methods such as `setLineWidth` and `setFilled` are tailored specifically to `FigActor`'s components.
**Reason**: These adjustments ensure that `FigActor` maintains full control over how its properties are set, tailored to the specific needs of its graphical components like `head`, `body`, `arms`, etc.
**Benefit**: Tailoring these methods specifically for `FigActor` ensures that the graphical behavior of the class is consistent and predictable, aligning with its specific graphical requirements. It removes any ambiguity or inappropriate behavior that might arise from inheriting generic implementations.

### Overall Impact
These changes address the Refused Bequest smell by making `FigActor` a more self-contained and independently functional class, no longer unnecessarily dependent on the `FigNodeModelElement` superclass. This improves the design by reducing unnecessary coupling to a parent class, enhancing clarity, maintainability, and ensuring that the class only contains relevant and fully utilized functionality.