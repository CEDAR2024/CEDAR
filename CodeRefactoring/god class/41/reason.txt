The original `DirectoryScanner` class was doing too much and was a clear example of a god class, violating the Single Responsibility Principle (SRP) of SOLID principles. It was responsible for managing directory scanning, file scanning, selector scanning, and resource handling. This makes the class difficult to maintain and understand.

In the refactored code, we have created separate classes each with their own single responsibility:

1. `DirectoryScannerHandler`: This class is responsible for scanning directories. It takes directory-related information in its constructor and provides a method `scanDirectory()` to perform the scanning.

2. `FileScannerHandler`: This class is responsible for scanning files. It also takes file-related information in its constructor and provides a method `scanFiles()` to perform the scanning.

3. The original `DirectoryScanner` is now acting as a coordinator or a facade, delegating the actual scanning tasks to the appropriate classes. It creates instances of `DirectoryScannerHandler` and `FileScannerHandler` and delegates the scanning task to these handlers.

By doing these changes, we have distributed the responsibilities among different classes, each handling a single concern. This makes the code easier to reason about, test, and maintain. This also increases the modularity and readability of the code.