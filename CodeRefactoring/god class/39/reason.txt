The main issue in the original code was the God Class smell, where the Form class was handling too many responsibilities which made it large and complex. This can make the code harder to understand, maintain, and extend.

Here are the changes that were made to address this:

1. Created FormValidator class: This class is responsible for form validation which was originally handled in the Form class. By separating this out, we've made the code more modular, easier to understand and maintain. It also follows the Single Responsibility Principle, where each class should have only one responsibility. FormValidator is now only responsible for validation.

2. Created FormComponentModelUpdater class: This class handles the updating of form component models. Similar to the FormValidator, this makes the code more modular and easier to manage. It also ensures that each class only has one responsibility.

3. Delegated responsibilities in Form class: In the Form class, we now create instances of FormValidator and FormComponentModelUpdater and use these to handle validation and model updating. This reduces the complexity and size of the Form class, making it more manageable and easier to understand.

These changes help to eliminate the God Class smell by breaking down the large Form class into smaller, more manageable classes each with a single responsibility. This improves the maintainability, readability and extendability of the code.