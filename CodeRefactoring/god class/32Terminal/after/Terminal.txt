The refactoring addresses the God Class code smell by adhering to the Single Responsibility Principle (SRP), one of the SOLID principles of object-oriented programming. SRP states that a class should have only one reason to change, meaning it should only have one job or responsibility. Below is an explanation of why each change was made and how it helps address the God Class code smell:

1. **ScreenManager**: The original `Terminal` class managed the screen buffer directly, including operations like filling, clearing, and updating the screen. By moving these responsibilities to a dedicated `ScreenManager`, we isolate all screen-related logic in one place. This makes it easier to maintain and modify screen handling without affecting other parts of the terminal logic.

2. **CursorManager**: Cursor movement and visibility were also handled by the `Terminal` class. The `CursorManager` takes over this responsibility, encapsulating all cursor-related operations. This separation allows changes to cursor behavior without impacting other functionalities.

3. **UTF8Decoder**: UTF-8 decoding was intermixed with other terminal functionalities. By extracting this into a `UTF8Decoder`, we create a reusable component focused solely on the character encoding aspect, which can be tested and evolved separately.

4. **VT100Parser**: The parsing of VT100 sequences is a complex task that was embedded within the main class. The `VT100Parser` class now encapsulates the parsing logic, simplifying the main class and making the parser logic easier to manage.

5. **VT100CommandHandler**: After parsing VT100 sequences, the original class also executed the corresponding actions. The `VT100CommandHandler` takes on the execution of parsed commands, which allows for a clear distinction between understanding a command (parsing) and taking action (execution).

6. **InputFilter**: Keyboard input handling and transformation according to terminal modes were part of the `Terminal` class. The `InputFilter` now encapsulates this behavior, which centralizes input preprocessing and makes it easier to adjust input handling independently.

7. **TerminalConfiguration**: The `Terminal` class was storing a lot of state information and configuration settings. By moving these into a separate `TerminalConfiguration` class, we encapsulate the state management, which simplifies the main class and groups configuration-related behavior together.

By making these changes, we reduce the complexity of the original `Terminal` class, making it more manageable and easier to understand. Each new class has a well-defined purpose and can be developed, tested, and debugged independently of the others. This modular approach also makes the system more flexible and adaptable to change. If a new requirement arises, such as supporting a different encoding or adding new command types, it can be addressed within the appropriate class without the risk of inadvertently affecting unrelated functionalities.