Sure, here are the explanations for the changes:

1. **Extracted Inner Classes**: The `Memcache`, `StoreFileScanner`, and `HStoreScanner` were extracted as inner classes from the `HStore` class. These classes encapsulate distinct responsibilities within the `HStore` class, making the code easier to understand and maintain. This addresses the God Class code smell by reducing the size and complexity of the `HStore` class and delegating responsibilities to more specialized classes.

2. **Moved Related Methods**: Methods that were closely related to the functionality of the new inner classes were moved into those classes. For example, methods for managing the memcache were moved into the `Memcache` class, and methods for scanning the store files were moved into `StoreFileScanner` class. This ensures that each class has a single responsibility and all the relevant methods are located within it, improving cohesion and further reducing the complexity of the `HStore` class.

3. **Preserved Encapsulation**: By creating these as inner classes, we're still keeping encapsulation intact. These classes can still access the private fields/methods of the outer class (`HStore`) if needed.

4. **Created Clear Interfaces**: The `HStoreScanner` class implements `HInternalScannerInterface`. This makes the responsibilities of the class clear and allows it to be used polymorphically where an `HInternalScannerInterface` is expected.

These changes help address the God Class code smell by distributing responsibilities among several classes, each with a single responsibility, rather than having one class that tries to do everything. This improves the maintainability and understandability of the code.