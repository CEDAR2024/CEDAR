The original code demonstrated a code smell known as Feature Envy, where a method relies heavily on data from another class or object. 

In this case, the method `scan` was overly dependent on the various states of the `HTMLScanner` object. This was problematic because it made the method difficult to read, understand and maintain due to its excessive length and complexity.

To address this issue, the refactored code introduces a new class, `HTMLScannerStateManager`, which is responsible for managing the states of the `HTMLScanner` object. This is done by moving the logic for each state into its own method within the `HTMLScannerStateManager` class.

This change helps to address the code smell by reducing the responsibilities of the original `scan` method, making it easier to understand and maintain. It also enhances the principle of encapsulation, as the details of how each state is handled are now hidden inside the `HTMLScannerStateManager` class.

Moreover, it improves the readability of the code by breaking down a large method into smaller, more manageable methods, each with a single responsibility. This makes the code easier to debug and test.

Finally, it promotes reuse, as the methods in `HTMLScannerStateManager` can potentially be used in other contexts, not just within the `scan` method.