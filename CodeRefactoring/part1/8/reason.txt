The original code had a "God Class" smell, which means that the `FTP` class was doing too many things. It was handling the FTP connection, performing FTP actions like sending, receiving, deleting files, listing files, and creating directories, and also handling the task execution. This made the class large, complex, and difficult to maintain.

To address this, the code was refactored by extracting the FTP actions into a separate class, `FTPAction`. This new class is responsible for the FTP actions only. Each action (send, get, delete, list, and make directory) is now a method in this class. This follows the Single Responsibility Principle, making each class responsible for a single part of the functionality.

The `FTP` class now creates an instance of `FTPAction` and delegates the FTP actions to this instance. This makes the `FTP` class smaller and simpler, as it is now mainly responsible for setting up the FTP connection and executing the task.

This refactoring improves the readability of the code, as each class and method has a clear responsibility. It also improves maintainability, as changes to the FTP actions can be made in the `FTPAction` class without affecting the `FTP` class. It's easier to test the functionality of each class independently. 

By doing this, the God Class smell is eliminated and the code quality is improved.