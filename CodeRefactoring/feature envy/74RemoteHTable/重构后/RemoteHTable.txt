The original `buildRowSpec` method had multiple responsibilities. It was constructing a complex string by directly accessing and manipulating data from several different sources: row data, family map, time range, and version information. This is a classic example of Feature Envy because the method is overly concerned with the data of other objects or data structures rather than its own.

To address this code smell, we made several changes:

1. **Extract Class (`RowSpecBuilder`)**: We introduced a new class, `RowSpecBuilder`, which is a common refactoring technique when a method is too concerned with data from other classes. This new class is responsible for building the row specification string, which is a single, cohesive responsibility. By doing this, we encapsulate all the data and logic necessary to build the string within one class, aligning with the principle of high cohesion.

2. **Encapsulation of Fields**: We passed all the necessary data to the constructor of `RowSpecBuilder`, encapsulating the data within the object. This means that the instance methods of `RowSpecBuilder` have direct access to the data they need without having to reach out to external structures or classes, reducing Feature Envy.

3. **Breaking Down the Method**: The large `buildRowSpec` method was broken down into smaller helper methods within `RowSpecBuilder` (`appendAccessToken`, `appendName`, `appendRow`, `appendFamilies`, `appendTime`, `appendMaxVersions`). Each of these methods is responsible for appending a specific part of the string, adhering to the Single Responsibility Principle (SRP). This makes the code more readable and maintainable because each method does one thing and does it well.

4. **StringBuilder Instead of StringBuffer**: We replaced `StringBuffer` with `StringBuilder`. This is not directly related to addressing Feature Envy, but it's a small improvement. `StringBuilder` is usually preferred over `StringBuffer` when thread safety is not a concern because it's faster due to not being synchronized.

5. **Private Helper Methods**: The helper methods in `RowSpecBuilder` are private, which means they are not accessible from outside the class. This encapsulation further focuses the responsibility of string building within the `RowSpecBuilder` class, preventing other classes from becoming too reliant on the internal workings of how a row specification is built.

6. **Method Naming**: The names of the new methods clearly describe what they are doing, such as `appendAccessToken` or `appendMaxVersions`. This self-documenting code style improves readability and makes it easier for future maintainers to understand the purpose of each method.

7. **Separation of Concerns**: By moving the string building logic to `RowSpecBuilder`, the original `buildRowSpec` method now has a single concern: to delegate the construction of the row specification string to the `RowSpecBuilder`. This separation of concerns makes the original method cleaner and its intent more evident.

Overall, these changes address the Feature Envy code smell by organizing the code into more logical structures where each piece of data and logic is closer to where it is most relevant. This results in a codebase that is easier to understand, maintain, and extend.