The original code was suffering from the "Feature Envy" code smell because the `performReferentialActions` method was excessively interested in the data of other classes such as `Constraint`, `Session`, `Table`, `Row`, `RowSetNavigatorDataChange`, etc. It was accessing and manipulating these objects' data directly, which is a sign of poor encapsulation and a violation of the principle of information hiding.

Here's how the changes in the refactored code address the code smell:

1. **Creation of `ConstraintHandler` class**: This class was created to encapsulate the details of how to handle a `Constraint` object. It has methods like `isDeleteAction()`, `isSetNullAction()`, `isSetDefaultAction()`, `isNoActionOrRestrict()`, and `performReferentialActions()`, each of which performs a specific operation on a `Constraint` object. This way, the logic related to a `Constraint` object is now contained within the `ConstraintHandler` class, reducing the envy of the `performReferentialActions` method towards the `Constraint` class.

2. **Creation of `ReferentialActionsPerformer` class**: This class was created to encapsulate the logic of performing referential actions. It uses a `ConstraintHandler` object to handle each `Constraint` object in the `fkMainConstraints` array of a `Table` object. This way, the `performReferentialActions` method of the `ReferentialActionsPerformer` class is no longer envious of the `Table` class because it doesn't directly access and manipulate the `fkMainConstraints` array of a `Table` object.

These changes enhance the encapsulation of the code and make the code more modular and easier to understand, maintain, and test. Each class now has a single responsibility and doesn't need to know the details of how other classes work, which is in line with the Single Responsibility Principle and the principle of information hiding.