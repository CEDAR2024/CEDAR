The original `renderTriangleHybrid` method exhibited the Feature Envy code smell because it operated extensively on the data from vertex properties, which were passed as a long list of parameters. The method was more concerned with the data of the vertices than with its own class's data. To address this smell, the following changes were made:

1. **Introduction of the `Vertex` class**: The creation of this class is the most significant change. It encapsulates the properties of a vertex (`Vec2 pos`, `float z`, `Vec3 vert`, `Vec3 norm`, `double u`, `double v`, `RGBColor diffuse`). This encapsulation is beneficial because it:

    - **Reduces parameter count**: The original method took a large number of parameters, making it hard to read and maintain. By encapsulating related data into a single class, the parameter list is significantly shortened.
    
    - **Increases cohesion**: The `Vertex` class groups related data, which increases the cohesion within the class. High cohesion is desirable in object-oriented design as it makes classes easier to maintain and reason about.
    
    - **Improves readability**: Methods in the `Vertex` class can now operate on vertex data directly, rather than passing around raw data. This makes the code within the `renderTriangleHybrid` method more readable, as it is clear which data belongs to which vertex.

2. **Sorting vertices**: The original code manually ordered vertices based on their `y` coordinates through a series of conditional statements. This was replaced with:

    - **Array and Comparator**: By storing vertices in an array and using a comparator to sort them, the code becomes more concise and easier to understand. This change leverages the Java standard library to handle a common task, which is both more efficient and less error-prone than the manual approach.

3. **Accessing properties through `Vertex` instances**: Once the vertices are encapsulated in the `Vertex` class and sorted, the rest of the method accesses vertex properties through these instances. This change:

    - **Clarifies property ownership**: It's now clear which properties belong to which vertex, as they are accessed through the vertex instance (e.g., `top.pos.x` instead of a standalone variable `x1`).
    
    - **Facilitates method extraction**: With cohesive vertex data, it becomes easier to extract methods that operate on a single vertex or a pair of vertices. This can further improve the design by breaking down complex operations into simpler, more focused methods.

Overall, these changes address the Feature Envy code smell by ensuring that the operations on vertex data are located with the data itself (`Vertex` class), rather than being spread out in a method that is primarily concerned with rendering logic. This refactoring leads to a design where the data and the behavior that manipulates the data are much closer together, which is a fundamental principle of good object-oriented design.