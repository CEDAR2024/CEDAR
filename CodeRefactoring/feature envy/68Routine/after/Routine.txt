The changes were made to address the "Feature Envy" code smell, which occurs when a method seems more interested in a class other than the one it actually is in. The method accesses the data of another object more than its own data. This can make the code harder to read, understand, and maintain.

In the original code, the `getMethod` function was accessing and manipulating data from the `Routine` object extensively, which is a clear sign of Feature Envy. This is problematic because it violates the principle of encapsulation, where an object's behavior should be defined within the object itself. 

Here's how each change addresses the code smell:

1. **Introduction of `RoutineManager` class**: This class was introduced to handle the responsibilities that `Routine` object had. By doing this, we are adhering to the Single Responsibility Principle, which states that a class should have only one reason to change. This makes the code easier to manage and test.

2. **Moving logic to `RoutineManager`**: The logic that was previously inside `getMethod` and was directly manipulating the `Routine` object's data has been moved to `RoutineManager`. This includes methods like `hasConnection`, `isValidParameterCount`, and `isValidReturnType`. This way, the `RoutineManager` is responsible for manipulating `Routine` data, which is more natural and intuitive.

3. **Usage of `RoutineManager` in `getMethod`**: Now, instead of the `getMethod` function directly manipulating `Routine` data, it calls methods on the `RoutineManager` object. This way, `getMethod` doesn't need to know the details of how `Routine` data is accessed and manipulated, it just needs to know which `RoutineManager` method to call. This is a good example of encapsulation, where the details of how something is done are hidden away in the object that is responsible for doing it.

By making these changes, we've made the `getMethod` function simpler and easier to understand, because it no longer needs to know the details of how `Routine` data is accessed and manipulated. We've also made the `Routine` object more encapsulated, because now the details of how its data is accessed and manipulated are contained within the `RoutineManager` object. This makes the code overall more maintainable and less prone to bugs.