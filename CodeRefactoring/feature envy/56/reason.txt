The changes were made to address the Feature Envy code smell. This smell arises when a method excessively uses data from other classes. In the original code, the method `buildRowSpec` was overly complex and was manipulating data from other classes.

1. Creating `RowSpecBuilder` class: A new class `RowSpecBuilder` was created to encapsulate the logic of building the row specification. This class takes the necessary data as inputs and provides a method `buildRowSpec` to construct the row specification. This change helps in moving the data and behavior related to building the row specification into a single place (`RowSpecBuilder`), making the code more maintainable and easier to understand.

2. Breaking down `buildRowSpec` into smaller methods: The original `buildRowSpec` method was doing too many things - appending row, appending families, appending qualifiers, appending time, and appending max versions. Each of these tasks was separated into its own private method within the `RowSpecBuilder` class. This improves readability and makes the code easier to manage and debug.

3. Encapsulating data manipulation within `RowSpecBuilder`: The data manipulation which was initially done in the `buildRowSpec` method is now done within the `RowSpecBuilder` class. This reduces the dependency of the `buildRowSpec` method on the data of other classes and mitigates the Feature Envy smell.

4. Simplifying the original method: The original `buildRowSpec` method is now much simpler. It just creates an instance of `RowSpecBuilder` and calls the `buildRowSpec` method on it. This makes the code cleaner and easier to understand. 

Overall, these changes help in reducing the complexity of the original code, making it more modular, and improving its maintainability.