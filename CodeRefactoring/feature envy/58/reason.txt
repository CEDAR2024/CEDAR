The code smell "Feature Envy" was present in the initial code as the method `getAuthenticatedUser` was heavily interacting with the `MemberDAO` object to fetch and update member data. This behavior indicated that these responsibilities could be better managed by another class which naturally fits in with the task of handling member data.

To refactor the code:

1. Created a new class `MemberManager`: This class is responsible for managing member data. It encapsulates the `MemberDAO` and provides higher level methods to interact with member data. This helps in reducing the interaction between `getAuthenticatedUser` method and `MemberDAO`.

2. Moved the member fetching and updating logic to `MemberManager`: The methods `getMember` and `updateLastLogon` in `MemberManager` now handle the task of fetching and updating member data. This helps in reducing the responsibility of `getAuthenticatedUser` method and makes the code more maintainable.

3. Used `MemberManager` in `getAuthenticatedUser` method: Instead of directly interacting with `MemberDAO`, `getAuthenticatedUser` method now uses `MemberManager`. This reduces the dependency of `getAuthenticatedUser` method on `MemberDAO` and makes the code cleaner.

These changes help in addressing the code smell "Feature Envy" by reducing the dependency of one method on the data of another class. It also improves the code's readability and maintainability by separating the concerns and encapsulating the data handling logic in a separate class.