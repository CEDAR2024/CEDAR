The main issue with the original code was that it was doing too much in a single method. It was checking if the object is resolved, adding the object to the list of resolved objects, and managing the list of unresolved objects. This made the method long and difficult to read and maintain, indicating the code smell of Feature Envy.

To address this, the code was refactored into a separate class, `SchemaObjectManager`. This class is responsible for managing the `SchemaObject`s and their state of being resolved or not. This encapsulates the related functionality into a separate class, making the code more modular and easier to manage.

The `isObjectResolved` method was created to check if a `SchemaObject` is resolved or not. This makes the code easier to read, as it's clear from the method name what it's doing.

The `addResolvedObject` method was created to handle adding a resolved `SchemaObject` to the list of resolved objects and updating the list and `HsqlArrayList`. This separates this functionality from the main method, making it easier to understand and maintain.

These changes help to address the code smell by making the code more modular, easier to read and maintain, and reducing the responsibilities of the main method.