The changes were made to address the code smell of "Feature Envy". This smell arises when a method excessively uses data from another class more than its own class data. In the provided code, the method `readExpression` was making extensive use of instance variables and methods from the surrounding class.

The solution was to create a new class `ExpressionReader` that encapsulates the behavior of reading an expression. This class now naturally owns the data it needs (`exprList`, `parseList`, `start`, `count`, `isOption`) and the method `readExpression` that was previously envious of this data.

The `readExpression` method was also refactored to delegate its different case handling to separate private methods (`handleQuestion`, `handlePosInteger`, `handleOption`, `handleRepeat`, `handleKeySet`, `handleDefault`). This improves readability and maintainability by ensuring that each method has a single, clear responsibility.

Finally, the original `readExpression` method is replaced with a simple method that creates an `ExpressionReader` and calls its `readExpression` method. This maintains the original method's interface for any existing callers.

These changes address the "Feature Envy" smell by ensuring that data and the methods that operate on it are encapsulated together in the same class, improving cohesion. It also improves the maintainability of the code by breaking down a complex method into smaller, more manageable methods.