The refactoring was done to address the code smell known as "Feature Envy". Feature Envy occurs when a method excessively uses features (methods, properties) of another class more than its own. In this case, the `findNode` method was using multiple features of the `NodeAVL` class and the `PersistentStore` class, indicating that the method might be more naturally placed in those classes.

To address this, the switch-case logic was extracted into a new class `NodeComparator`. This class is responsible for comparing nodes, which is a responsibility that fits more naturally with the concept of a "Node Comparator" than with the original class. This refactoring addresses the Feature Envy smell by moving the logic where it seems to belong conceptually.

Here are the changes that were made:

1. **Creation of the `NodeComparator` class**: This class was created to handle the logic of comparing nodes. This makes the code more readable and maintainable because the responsibility of comparing nodes is now encapsulated in its own class. It's also more intuitive to understand: if you want to compare nodes, you use the `NodeComparator`.

2. **Moving the switch-case logic to `NodeComparator`**: The logic for comparing nodes based on different conditions was moved to the `compare` method in the `NodeComparator` class. This makes the `findNode` method cleaner and easier to understand.

3. **Using `NodeComparator` in `findNode`**: In the `findNode` method, an instance of `NodeComparator` is now created and used to compare nodes. This makes the `findNode` method easier to read, as the complex comparison logic is now hidden inside the `NodeComparator`.

By making these changes, the code became more readable, maintainable, and better structured. The responsibilities are now better distributed among classes, each class handling its own part, which is a key aspect of good object-oriented design.