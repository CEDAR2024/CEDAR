The original code exhibits the Feature Envy code smell because the `resolveService` method is directly manipulating the data of the `TiVo` object and `ServiceInfo` object. It is accessing and modifying the properties of these objects extensively.

To address this, several changes were made:

1. A new class, `TiVoServiceManager`, was created. This class is responsible for setting the properties of a `TiVo` object. The methods `setTiVoInfo` and `setTiVoProperties` encapsulate the logic for setting the properties of a `TiVo` object based on the information from a `ServiceInfo` object. This change helps in encapsulating the behavior that was previously spread out in the `resolveService` method, bringing it closer to the data it operates on.

2. In the `resolveService` method, an instance of `TiVoServiceManager` is created and used to set the properties of a `TiVo` object. The `getTiVo` method is then used to retrieve the `TiVo` object. This change reduces the method's dependencies on the `TiVo` and `ServiceInfo` objects, making the code easier to read and maintain.

3. A new method `handleTiVoUpdates` was created to handle the logic for updating known TiVos. This reduces the complexity of the `resolveService` method, making it easier to understand.

These changes address the Feature Envy code smell by moving the logic that operates on the data of a `TiVo` object into a class that is responsible for managing `TiVo` objects. This improves the encapsulation of the code, making it easier to read, understand, and maintain. Additionally, it makes the code more modular and easier to test.